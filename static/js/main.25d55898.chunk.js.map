{"version":3,"sources":["GalleryOption.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["GalleryOption","props","id","onClick","clickButton","name","Nav","buttonName","map","buttonInfo","changeArt","App","getArt","axios","method","url","params","key","format","q","state","userQuery","imgonly","then","res","setState","artArray","data","artObjects","handleClick","e","console","log","target","this","artPiece","title","src","webImage","alt","longTitle","principalOrFirstMaker","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iRAYeA,MAVf,SAAuBC,GACnB,OACE,4BACE,4BAAQC,GAAID,EAAMC,GAAIC,QAASF,EAAMG,aAClCH,EAAMI,QCcFC,MAjBf,SAAaL,GAET,OACE,6BACE,4BAHgB,CAAC,CAACC,GAAI,QAASK,WAAY,SAAW,CAACL,GAAI,SAAUK,WAAY,UAAW,CAACL,GAAI,MAAOK,WAAY,OAAQ,CAACL,GAAI,QAASK,WAAY,UAIrIC,KAAI,SAAAC,GACb,OAAO,kBAAC,EAAD,CAAeP,GAAIO,EAAWP,GAAIE,YAAaH,EAAMS,UAAWL,KAAMI,EAAWF,mBCoEzFI,E,kDAtEb,aAAe,IAAD,8BACZ,gBAYFC,OAAS,WAIPC,IAAM,CACJC,OAAQ,MACRC,IAJO,+CAKPC,OAAQ,CACNC,IALQ,WAMRC,OAAQ,OACRC,EAAG,EAAKC,MAAMC,UACdC,SAAS,KAEVC,MAAK,SAACC,GAIL,EAAKC,SAAS,CACZC,SAAUF,EAAIG,KAAKC,iBA/Bb,EAoCdC,YAAc,SAACC,GACbC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,EAAEG,OAAO/B,IACrB,EAAKuB,SACH,CACEJ,UAAU,GAAD,OAAKS,EAAEG,OAAO/B,MACtB,kBAAM,EAAKU,aAxChB,EAAKQ,MAAQ,CACXM,SAAU,GACVL,UAAW,QAJD,E,gEAUZa,KAAKtB,W,+BAsCL,OACE,8BACE,6CAEA,kBAAC,EAAD,CAAKF,UAAWwB,KAAKL,cACrB,4BACGK,KAAKd,MAAMM,SAASlB,KAAI,SAAC2B,GAExB,OADAJ,QAAQC,IAAIG,GAEV,4BACE,4BAAKA,EAASC,OACd,yBAAKC,IAAKF,EAASG,SAASvB,IAAKwB,IAAKJ,EAASK,YAC/C,2BAAIL,EAASM,iC,GA9DXC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.25d55898.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction GalleryOption(props){\r\n    return (\r\n      <li>\r\n        <button id={props.id} onClick={props.clickButton}>\r\n          {props.name}\r\n        </button>\r\n      </li>\r\n    );\r\n}\r\n\r\nexport default GalleryOption;","import React from 'react';\r\nimport GalleryOption from './GalleryOption';\r\n\r\nfunction Nav(props){\r\n    const buttonArray = [{id: 'water', buttonName: 'Water'},  {id: 'flower', buttonName: 'Flower'}, {id: 'sun', buttonName: 'Sun'}, {id: 'birds', buttonName: 'Birds'}]\r\n    return (\r\n      <nav>\r\n        <ul>\r\n            {buttonArray.map(buttonInfo => {\r\n                return <GalleryOption id={buttonInfo.id} clickButton={props.changeArt} name={buttonInfo.buttonName}/>\r\n                 \r\n            })}\r\n            {/* <GalleryOption id={'candy'} clickButton={props.changeArt} name={'Candy'}/>\r\n            <GalleryOption id={'flower'} clickButton={props.changeArt} name={'Flower'}/>\r\n            <GalleryOption id={'monkey'} clickButton={props.changeArt} name={'Monkey'}/> */}\r\n        </ul>\r\n      </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Nav from './Nav';\n\nclass App extends Component {\n  // runs the very first time the component renders\n  constructor() {\n    super();\n    this.state = {\n      artArray: [],\n      userQuery: 'food'\n    };\n  }\n\n  // Go get the list of ar - API call\n  componentDidMount() {\n    this.getArt();\n  }\n\n  getArt = () => {\n    // make an axios call to get a list of art.\n    const url = `https://www.rijksmuseum.nl/api/en/collection`;\n    const key = \"COy9UMH5\";\n    axios({\n      method: \"GET\",\n      url: url,\n      params: {\n        key: key,\n        format: \"json\",\n        q: this.state.userQuery,\n        imgonly: true,\n      },\n    }).then((res) => {\n        // console.log(res.data.artObjects);\n        // changing the state\n        // update the value of this.state.artArray = to the response that we get\n        this.setState({\n          artArray: res.data.artObjects,\n        });\n      });\n  }\n\n  handleClick = (e) => {\n    console.log('clicked');\n    console.log(e.target.id);\n    this.setState(\n      {\n        userQuery: `${e.target.id}`,\n      }, () => this.getArt()\n    );\n  };\n\n  // Make the art list accessible to the component\n  render() {\n    return (\n      <main>\n        <h1>SUCH NICE ART</h1>\n        {/* render list of art */}\n        <Nav changeArt={this.handleClick} />\n        <ul>\n          {this.state.artArray.map((artPiece) => {\n            console.log(artPiece);\n            return (\n              <li>\n                <h2>{artPiece.title}</h2>\n                <img src={artPiece.webImage.url} alt={artPiece.longTitle} />\n                <p>{artPiece.principalOrFirstMaker}</p>\n              </li>\n            );\n          })}\n        </ul>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}